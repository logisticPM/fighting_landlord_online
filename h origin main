[1mdiff --git a/client/src/ui/PixiBoard.tsx b/client/src/ui/PixiBoard.tsx[m
[1mindex 01f56c9..e60f97d 100644[m
[1m--- a/client/src/ui/PixiBoard.tsx[m
[1m+++ b/client/src/ui/PixiBoard.tsx[m
[36m@@ -143,8 +143,13 @@[m [mexport const PixiBoard: React.FC<Props> = ({ snap, mySeat, selected, onSelectedC[m
   }, []);[m
 [m
   const myHand = useMemo(() => {[m
[31m-    if (!snap || mySeat === null) return [] as Entity[];[m
[31m-    const raw = snap.players.find((p) => p.seat === mySeat)?.hand || [];[m
[32m+[m[32m    if (!snap || mySeat === null) {[m
[32m+[m[32m      console.log('myHand: No snap or mySeat is null', { snap: !!snap, mySeat });[m
[32m+[m[32m      return [] as Entity[];[m
[32m+[m[32m    }[m
[32m+[m[32m    const player = snap.players.find((p) => p.seat === mySeat);[m
[32m+[m[32m    const raw = player?.hand || [];[m
[32m+[m[32m    console.log(`myHand: Player seat ${mySeat} has ${raw.length} cards`, { player, raw: raw.slice(0, 5) });[m
     // Sort left->right: big -> small. Tie-break by suit for stable grouping.[m
     const rankValue: Record<string, number> = { '2': 15, 'A': 14, 'K': 13, 'Q': 12, 'J': 11, '10': 10, '9': 9, '8': 8, '7': 7, '6': 6, '5': 5, '4': 4, '3': 3 };[m
     const suitValue: Record<string, number> = { spades: 4, hearts: 3, clubs: 2, diamonds: 1 };[m
[36m@@ -275,9 +280,10 @@[m [mexport const PixiBoard: React.FC<Props> = ({ snap, mySeat, selected, onSelectedC[m
     const drawAvatar = (x: number, y: number, seatNum: number) => {[m
       const isLandlord = snap?.landlordSeat !== null && snap?.landlordSeat !== undefined && seatNum === (snap?.landlordSeat as number);[m
       [m
[31m-      // Simplified debug logging[m
[31m-      if (snap?.landlordSeat !== null) {[m
[31m-        console.log(`Seat ${seatNum}: ${isLandlord ? 'LANDLORD' : 'farmer'}`);[m
[32m+[m[32m      // Debug logging for landlord assignment[m
[32m+[m[32m      console.log(`Avatar ${seatNum}: landlordSeat=${snap?.landlordSeat}, isLandlord=${isLandlord}, role=${isLandlord ? 'LANDLORD' : 'farmer'}`);[m
[32m+[m[32m      if (snap?.started && snap?.landlordSeat === null) {[m
[32m+[m[32m        console.warn('Game started but no landlord assigned!');[m
       }[m
       [m
       const tex = loadAvatarTexture(isLandlord ? 'landlord' : 'farmer');[m
[1mdiff --git a/server/src/index.ts b/server/src/index.ts[m
[1mindex 97ae702..f05e060 100644[m
[1m--- a/server/src/index.ts[m
[1m+++ b/server/src/index.ts[m
[36m@@ -358,9 +358,23 @@[m [mserver.listen(PORT, () => console.log(`Landlord online server listening on :${PO[m
 function startPlaying(room: RoomState) {[m
   room.bidding = false;[m
   room.started = true;[m
[31m-  room.landlordSeat = room.provisionalLandlordSeat ?? 0;[m
[32m+[m[41m  [m
[32m+[m[32m  // CRITICAL FIX: Ensure provisionalLandlordSeat is not null before starting[m
[32m+[m[32m  if (room.provisionalLandlordSeat === null || room.provisionalLandlordSeat === undefined) {[m
[32m+[m[32m    console.error('[startPlaying] ERROR: No landlord selected, cannot start game');[m
[32m+[m[32m    return;[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  room.landlordSeat = room.provisionalLandlordSeat;[m
[32m+[m[32m  console.log(`[startPlaying] Landlord assigned to seat ${room.landlordSeat}`);[m
[32m+[m[41m  [m
   // Give bottom cards to landlord[m
   const landlord = room.players[room.landlordSeat];[m
[32m+[m[32m  if (!landlord) {[m
[32m+[m[32m    console.error(`[startPlaying] ERROR: Landlord player not found at seat ${room.landlordSeat}`);[m
[32m+[m[32m    return;[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
   landlord.hand.push(...room.bottomCards);[m
   room.currentSeat = room.landlordSeat;[m
   room.lastPlay = [];[m
